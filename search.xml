<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>yin_framework</title>
      <link href="/2019/08/16/yin-framework/"/>
      <url>/2019/08/16/yin-framework/</url>
      
        <content type="html"><![CDATA[<h1 id="YIN-Framework"><a href="#YIN-Framework" class="headerlink" title="YIN.Framework"></a>YIN.Framework</h1><h2 id="YIN-Core"><a href="#YIN-Core" class="headerlink" title="YIN.Core"></a>YIN.Core</h2><p><em>//基本数据转换</em><br>obj.ToIn();<br>obj.ToString();<br>obj.ToDouble();<br>…<br><em>//Table,List互转</em><br>List<t> list;<br>DataTable dt = list.ListToDataTable(list);<br>var list2 = dt.ToList<t>();<br>var csvString = Expression.DataTableToString(table);<br><em>//对像互转（对像复制）</em><br>T obj;<br>string s = obj.ToJson();<br>T t = s.ToObject<t>();</t></t></t></p><h2 id="YIN-Data"><a href="#YIN-Data" class="headerlink" title="YIN.Data"></a>YIN.Data</h2><h5 id="应用初始化"><a href="#应用初始化" class="headerlink" title="应用初始化"></a>应用初始化</h5><pre class=" language-c#"><code class="language-c#">                        /*             1，使用数据库连接字符串，可以同时使用多个连接字符串             2，使用数据库映射文件             3，完成配置             */            DataMapper.Initialize(o =>            {            o.UseDb(new List<ConnModel>() {                    new ConnModel() {                        Name ="hsdb", Type = DatabaseType.SqlServer, ConnStr = YIN.Core.Config.GetValue("hsdb"),                    },                    new ConnModel() {                        Name ="hsdb2", Type = DatabaseType.SqlServer, ConnStr = YIN.Core.Config.GetValue("hsdb"),                    },            });            o.UseMappingAssembly(typeof(HangerMasterEntity).Assembly);            o.Complete();</code></pre><h5 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h5><h6 id="获取ISession实例"><a href="#获取ISession实例" class="headerlink" title="获取ISession实例"></a>获取ISession实例</h6><h6 id="直接获取"><a href="#直接获取" class="headerlink" title="直接获取"></a>直接获取</h6><ol><li>SessionFactory.Session //使用默认数据库连接</li><li>SessionFactory.GetIDatabase() //使用默认数据库连接</li><li>SessionFactory.GetIDatabase(“hsdb”) //指定数据库连接。连接名为数据库连接配置时的用户名。</li></ol><h6 id="通过服务层获取"><a href="#通过服务层获取" class="headerlink" title="通过服务层获取"></a>通过服务层获取</h6><ol><li>XXXXXService.cs：RepositoryFactory</li><li>this.BaseRepository() 或 this.BaseRepository(“hsdb”)</li></ol><h6 id="使用ISession对像"><a href="#使用ISession对像" class="headerlink" title="使用ISession对像"></a>使用ISession对像</h6><pre class=" language-c#"><code class="language-c#">                IRepository BeginTrans();        void BulkInsert(string tableName, int buffer, DataTable dt);        void Close();        void Commit();        int Delete<T>(Expression<Func<T, bool>> condition) where T : class, new();        int Delete<T>(T entity) where T : class;        int Delete<T>(List<T> entities) where T : class;        int ExecuteByProc(string procName);        int ExecuteByProc(string procName, List<DbParam> dbParameter);        T ExecuteByProc<T>(string procName) where T : class;        T ExecuteByProc<T>(string procName, object dbParameter) where T : class;        int ExecuteBySql(string strSql);        int ExecuteBySql(string strSql, object dbParameter);        T FindEntity<T>(string strSql, object dbParameter) where T : class, new();        T FindEntity<T>(object keyValue) where T : class;        T FindEntity<T>(Expression<Func<T, bool>> condition) where T : class, new();        IEnumerable<T> FindList<T>(Expression<Func<T, bool>> condition, Pagination pagination) where T : class, new();        IEnumerable<T> FindList<T>(string strSql, object dbParameter, Pagination pagination) where T : class;        IEnumerable<T> FindList<T>() where T : class, new();        IEnumerable<T> FindList<T>(string strSql) where T : class;        IEnumerable<T> FindList<T>(string strSql, object dbParameter) where T : class;        IEnumerable<T> FindList<T>(Pagination pagination) where T : class, new();        IEnumerable<T> FindList<T>(string strSql, Pagination pagination) where T : class;        IEnumerable<T> FindList<T>(Expression<Func<T, bool>> condition) where T : class, new();        object FindObject(string strSql, object dbParameter);        object FindObject(string strSql);        DataTable FindTable(string strSql, object dbParameter, Pagination pagination);        DataTable FindTable(string strSql, Pagination pagination);        DataTable FindTable(string strSql, object dbParameter);        DataTable FindTable(string strSql);        DbConnection GetDbConnection();        IEnumerable<T> GetDbTable<T>() where T : class, new();        IEnumerable<T> GetDbTableFields<T>(string tableName) where T : class, new();        object GetIdentity();        int Insert<T>(T entity) where T : class;        int Insert<T>(List<T> entities) where T : class;        IQueryable<T> IQueryable<T>(Expression<Func<T, bool>> condition) where T : class, new();        IQueryable<T> IQueryable<T>() where T : class, new();        void Rollback();        int Update<T>(List<T> entities) where T : class;        int Update<T>(T entity) where T : class;        int UpdateEx<T>(T entity) where T : class;</code></pre><h6 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h6><ol><li>T 数据库对像，或者是需要查询转换的对像</li><li>BulkInsert 大数据插入</li><li>condition 基于Linq的条件表达式</li><li>Pagination 分页数据</li><li>dbParameter Dapper参数，可以通过 List 使用扩展方法ToDbParameters()`进行转换。</li></ol><h6 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h6><ol><li>ISession session;</li><li>Session.FindTable(“sql”); //直接获取一个DataTable</li><li>Session.FindTable (“sql”) //获取DataTable的同时将DataTable转化为对应的 List 对像</li></ol><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ul><li><p>本组件支持主流数据库，支持EF所支持的操作方式。</p></li><li><p>如果使用Update 或者是Insert 以及Delete 这种对像操作，需要使用对像映射功能。</p></li><li><p>所有操作支持 <code>IDisposable</code>,以及<code>数据库事务</code></p></li><li><p>事务的使用方式是</p><ul><li>session.BeginTrans();</li><li>session.Commit();</li><li>session.Rollback();</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> .Net，YIN Framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/08/16/hello-world/"/>
      <url>/2019/08/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>智能掉挂说明</title>
      <link href="/2019/08/10/ghs-config/"/>
      <url>/2019/08/10/ghs-config/</url>
      
        <content type="html"><![CDATA[<h3 id="吊挂基础数据配置"><a href="#吊挂基础数据配置" class="headerlink" title="吊挂基础数据配置"></a>吊挂基础数据配置</h3><ul><li><p>重置pusher_info参数 [pusher_info]</p><p>contents=0,next_workstation=0,accepted_by_node=0,previous_contents=0</p></li><li><p>清除报警信息[appeal_records]   </p><p>isfirsthanger=0,online=0,Clocked_In=0,is_register_full=0,is_station_full=0</p></li><li><p>清除链条上数量-保存链条数量[rtd_info]</p></li><li><p>清除链条上数量-不保存链条数量[rtd_info]</p><p>recv_on_chain=0,isfirsthanger=0,online=0,Clocked_In=0,is_register_full=0,is_station_full=0</p></li></ul><h5 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h5><ol><li>工序 [Operation_Codes]</li><li>尺码 [Size_Master]</li><li>颜色 [Colour_Master]</li><li>客户信息[Customer]</li><li>员工信息[Employee_Master]</li><li>订单信息[Style_order]</li><li>款式信息[Style_master]</li><li>款式工艺流程[Style_Operations]</li><li>系统参数配置[Parameters]</li></ol><h5 id="其他配置表"><a href="#其他配置表" class="headerlink" title="其他配置表"></a>其他配置表</h5><ol><li><p>线信息[Line_Information]</p></li><li><p>站信息[RTD_Info]</p></li><li><p>衣架线路图</p><ol><li>主表[Style_loading]</li><li>款式工艺流程[Style_Operations]</li><li>款式站位信息[Style_Route_Detail]</li></ol></li><li><p>衣架流动</p><ol><li>当前衣架流动信息 [Hanger_Master]</li><li>衣架流动历史信息 [Hanger_Detail]</li><li>返工[QC_Hanger_Routing]</li></ol></li><li><p>桥接配置</p><ol><li><p>Bridge_Information（从哪条线哪个站，要去哪条线哪个站）</p><table><thead><tr><th>Id    </th><th>From_Line</th><th>From_Station</th><th>To_Line</th><th>To_Station</th></tr></thead><tbody><tr><td>主键</td><td>从哪条线</td><td>从哪个站</td><td>去哪条线</td><td>去哪个站</td></tr></tbody></table></li></ol></li></ol><ol start="2"><li><p>Bridge_Route（从当前线去下一条线要经过哪条线）</p><table><thead><tr><th>Id</th><th>iNextLineNo</th><th>iCurBgLineNo</th><th>iCurBgStationNo</th></tr></thead><tbody><tr><td>主键</td><td>去下一条线</td><td>从当前线</td><td>经过哪条线</td></tr></tbody></table></li></ol><ol start="6"><li><p>初始化杆值配置</p><ol><li><p>【线参数配置】[Hardware_Configuration] 总杆数配置<strong>！！！！！！重要！！！！！</strong></p><table><thead><tr><th>功能</th><th>字段</th></tr></thead><tbody><tr><td>总杆数量</td><td>Pushers</td></tr><tr><td>推杆器间距</td><td>Distance_Between_Pushers</td></tr><tr><td>推杆器时间间隔</td><td>Time_Between_Pushers</td></tr><tr><td>MotorLAN光电开关允许误差</td><td>Sensor_Timeout</td></tr><tr><td>进站气阀开关时长</td><td>In_Feed_Duration</td></tr><tr><td>出站气阀开关时长</td><td>Out_Feed_Duration</td></tr><tr><td>总工作站数</td><td>Number_Of_Workstations</td></tr><tr><td>回归站杠号</td><td>Rfid_Pusher</td></tr><tr><td>推杆最大时间间隔</td><td>Max_Time_Between_Pushers</td></tr><tr><td>推杆最小时间间隔</td><td>Min_Time_Between_Pushers</td></tr><tr><td>防抖动延时</td><td>Prevent_jitter_Delay</td></tr><tr><td>条屏通信串口</td><td>iSerial_Port</td></tr></tbody></table></li><li><p>【推杆参数】[Workstation_Hardware_Configuration]（系统硬件参数配置）</p><table><thead><tr><th>功能</th><th>字段</th></tr></thead><tbody><tr><td>线</td><td>Line_Number</td></tr><tr><td>工作站编号</td><td>Workstation</td></tr><tr><td>进推杆器号</td><td>In_Feed_Pusher</td></tr><tr><td>进推杆器与摆头距离</td><td>In_Feed_Distance</td></tr><tr><td>出推杆器号</td><td>Out_Feed_Pusher</td></tr><tr><td>出推杆器与摆头距离</td><td>Out_Feed_Distance</td></tr><tr><td>IP地址</td><td>Ip_Addr</td></tr><tr><td>是否允许衣架出站</td><td>bHangerOut</td></tr><tr><td>进站位与大传感器之间的杆数</td><td>In_Feed_Pushers_from_Sensor</td></tr><tr><td>进站推杆间距</td><td>In_Feed_Distance_To_Next_Pusher</td></tr><tr><td>出站位与大传感器之间的杆数</td><td>Out_Feed_Pushers_From_Sensor</td></tr><tr><td>出站推杆间距</td><td>Out_Feed_Distance_To_Next_Pusher</td></tr></tbody></table></li><li><p>[RTD_Info]（线别配置）</p><ol><li><p>Line_Number</p></li><li><p>Workstation</p></li><li><p>In_Feed_Pusher「进站推杆间距」</p></li><li><p>Out_Feed_Pusher「出站推杆间距」</p><p>注：In_Feed_Pusher，Out_Feed_Pusher与Workstation_Hardware_Configuration保持一致</p></li></ol></li><li><p>计算规则</p><ol><li><p>进出站推杆杆数</p><ol><li>从大传感器逆时针数杆的数目至站位</li></ol></li><li><p>进出站推杆间距</p><ol><li>进站：<ol><li>大于200mm，以当前杆号为准（200+当前杆到进站口的距离-200)</li><li>小到200mm，加一杆（400)加少于200的值，再减200</li></ol></li></ol></li><li><p>出站：</p><ol><li>后一杆加两杆（大概数据在800-1000） </li></ol></li></ol></li></ol></li></ol><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><ol><li><p>涉及到的表（<strong>特别说明，以下表与以前的表唯一不同是新增了ID列</strong>）</p><table><thead><tr><th>说明</th><th>表名</th><th>配置说明</th></tr></thead><tbody><tr><td>用户登陆信息表</td><td>Password_Security</td><td>复制</td></tr><tr><td>员工信息表</td><td>Employee_Master</td><td>复制</td></tr><tr><td>线别配置表</td><td>Line_Information</td><td>复制</td></tr><tr><td>工作站表</td><td>RTD_Info</td><td>复制+IP配置</td></tr><tr><td>系统参数表</td><td>Parameters</td><td>复制</td></tr><tr><td>推杆参数表</td><td>Pusher_Info</td><td>复制</td></tr><tr><td>硬件配置表</td><td>Hardware_Configuration</td><td>复制</td></tr><tr><td>工作站配置表</td><td>Workstation_Hardware_Configuration</td><td>复制</td></tr><tr><td>桥接信息表</td><td>Bridge_Information</td><td>清空重配</td></tr><tr><td>桥接路由表</td><td>Bridge_Route</td><td>清空重配</td></tr></tbody></table><p><strong>以上注意点</strong></p><ol><li><p>以上表都有加ID主键，请添加时使用 <code>SELECT 0,* FROM xxx</code> 其中0为ID列。</p></li><li><p>线别复制完成，确认<code>motolan IP,总站数，起始站号</code></p></li><li><p>工作站复制完成，确认 <code>下位机的IP地址，一般1号站为101,2号站为102...</code></p></li><li><p>推杆参数<code>[Pusher_Info]</code>与硬件配置表<code>[Hardware_Configuration]</code>所设置的<code>推杆总数是否匹配</code></p></li><li><p><code>Workstation_Hardware_Configuration</code> 配置推杆进出站参数，一般不准备配置这里</p><p><strong><em>一定要先核对总杆数是否正确，常规我们设置的是23杆，如果超过23杆，第23杆会做减1处理</em></strong></p></li><li><p>控制是否出站很多核心参数都在rtd_info里面，关键SQL</p><pre class=" language-mssql"><code class="language-mssql">declare @less_stock int,                @less_station int,                @less_station_line int,                @distribute_time datetime        set @less_stock=0        set @less_station=0        set @less_station_line=0        set @distribute_time=''        select top 1             @less_stock=b.stock_recv_on_chain,            @less_station=a.station_number,            @less_station_line=a.line_number,            @distribute_time=b.Distribute_Time         from style_route_detail a ,stock_view b            where a.route_id=1350            and a.line_number=b.line_number            and a.station_number=b.workstation             and (b.status='0' or b.status is null or b.status='')--            and b.line_number=@iLineNumber_in            and a.process_order=3    --        and b.online=1            and b.is_station_full=0            and (1=0 or 1=1 and b.stock_recv_on_chain<b.Station_Full_Numbers)            and (a.receive_mode is null or a.receive_mode in (1,3))            and (b.set_colour=4 or b.set_colour='任意' or b.set_colour is null) and (b.set_size=5 or b.set_size='任意' or b.set_size is null)    --        and b.is_register_full=0            and b.stock_recv_on_chain<4            order by b.stock_recv_on_chain asc ,Distribute_Time asc            select @less_stock,  @less_station</code></pre><ol><li><p>其中，接收模式，现在为（0,1,2)，</p></li><li><p>是否满站：is_station_full</p></li><li><p>这一句也是相当重要的： b.stock_recv_on_chain&lt;b.Station_Full_Numbers </p></li><li><p>这个主要为指定颜色尺码进站，</p><p>b.set_colour=4 or b.set_colour=’任意’ or b.set_colour is null) and (b.set_size=5 or b.set_size=’任意’ or b.set_size is null</p></li></ol></li><li><p>数据处理</p><pre class=" language-mssql"><code class="language-mssql">UPDATE RTD_Info SET Set_Colour=null,Set_Size=0,Is_Register_Full=0,Is_Station_Full=0,recv_on_chain=0,isfirsthanger=0,online=0,Clocked_In=0;UPDATE RTD_Info SET Status='0' WHERE Status='接收';UPDATE RTD_Info SET Status='1' WHERE Status='不接收';UPDATE RTD_Info SET Status='2' WHERE Status='备用站';</code></pre><p><strong><em>检查Stock_view视图，关键点，satus,set_color,setsize</em></strong></p></li><li><p>其他配置项</p><ol><li>数据库参数配置第3项，IP地址应为 <code>192.168.1.99</code></li><li>数据库参数配置第66项，MAC地址应为<code>UDP</code>服务器MAC地址。</li><li>UDP服务器IP设置，IP地址应为：192.168.1.99,并且一定要设置子网掩码与网关，不然UDP可能故障。</li><li>下未及原则上IP地址为对应站号，比如第五站，那IP地址应为：192.168.1.105，也就是100+站位号</li><li>所有单线站位必须连续，比如1-5,6-20,根据线别配置起始线以及对应总站数。切不可使用不连续站位。</li></ol></li></ol><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ol><li>程序无法启动或主控无法启动<ol><li>线别对应站位是否配置正确。站位具体计算在 <code>line_information</code> 中起始站与站数量中体现。但是实际应用回取 <code>rtd_info</code>  所以请保证 <code>line_information</code>与<code>rtd_info</code>中站点的匹配。</li></ol></li><li>首站不出站<ol><li>首先看日志确认当前衣架号，可以看日志，看回归…</li><li>查看 <code>Hanger_Master</code>表中是否有记录</li><li>如果有记录请确认记录的 <code>Next_Station</code>是否正常。</li><li>检查存储过程<code>Pro_Fetch_Route_check</code> 确认当前衣架是否为首站。</li><li>检查存储过程 <code>Pro_Fetch_Route</code> 下一站流程是否正常。</li></ol></li><li>其他站不出站<ol><li>与首站不出站类似，只是不需要检查 <code>Pro_Fetch_Route_check</code></li><li><code>Pro_Fetch_Route</code> 首站 <code>flag</code>为1，其他为0</li></ol></li><li>跨线站到站<ol><li>数据库 <code>Hanger_Master</code> 中ToLine,ToStaiton 用作临时存储。<code>Pro_Fetch_Route</code>存储过程中处理</li></ol></li><li>多工序返工<ol><li>将返工信息存储于临时暂存区，指令 <code>GlobalCmd.MUILT_REDO</code></li><li>确认返工 <code>GlobalCmd.MUILT_REDO_COMMIT</code> 读取暂存区数据，执行正常返工流程。</li><li>返工涉及到的表 <code>QC_Hanger_Routing</code> 表中is_redo 确认是否返工完成。</li></ol></li><li>其他<ol><li>请参见初始化流程</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> YIN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ghs </tag>
            
            <tag> 智能吊挂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IIS 应用程序首次启动慢</title>
      <link href="/2019/08/01/iis-first-slow/"/>
      <url>/2019/08/01/iis-first-slow/</url>
      
        <content type="html"><![CDATA[<p><strong>问题现象</strong></p><p>访问ASP.NET Web项目的时候,第一次访问比较慢，当闲置一段时间后，再次访问还是会非常慢。</p><p><strong>问题原因</strong></p><p>这是IIS回收造成的，再次访问的时候会初始化操作，初始化需要耗费时间，所以访问会比较慢，第二次访问的时候不需要初始化操作，因此变快了。</p><p><strong>解决办法</strong></p><p>IIS应用初始化会在网站第一次创建后或者对应网站的应用程序池回收后，自动开启新程序池，并启动网站初始化，模拟一次正常请求，使网站一直处于在线状态。</p><p><strong>修改IIS中的配置</strong></p><p>1、修改启用应用程序池（AlwaysRunning）：保证应用程序池在第一次创建或者被回收后，能自动再次重启运行。</p><p><code>网站对应应用程序</code> - <code>高级</code> - <code>常规</code> - <code>启动模式</code> - <code>AlwaysRunning</code></p><p>2、修改闲置超时1740分钟:长时间没有请求释放资源，可以不用修改。</p><p><code>网站对应应用程序</code> - <code>高级</code> - <code>进程模型</code> - <code>闲置超时（分钟）</code> - <code>1740</code></p><p>3、修改启用网站程序预加载（true）：保证程序池在启动过后，网站能响应预加载动作。</p><p><code>网站</code> - <code>高级</code> - <code>常规</code> - <code>预加载已启用</code> - <code>True</code></p><p>我看有些博客会将进程模型/闲置超时设置为0或者很长，觉得不太好。闲置超时是指如果你的应用程序未处理请求也未接受请求，则进入闲置状态，这个状态可以保持的时间，超过这个时间，则该进程将会从内存中删除并释放所有内容。</p><p>如果设置为0，则不会闲置一直持续不好，如果代码中有内存泄漏，则会一直持续，完全占用服务器。设置时间过长，长时间没有请求，还占用这内存，有点浪费。</p><p>按照以上修改之后，基本上都会秒启动。这样的修改同样也适用于MVC，web api等IIS项目</p><p><strong>IIS8以前的项目的第一次访问ASP.NET应用会很慢</strong></p><p>以前的程序有可能有这个问题，现在的基本上没有了，因为从Windows 8开始，不再要求必须对CSP进行签名。</p><p>Microsoft Authenticode：Microsoft Authenticode旨在帮助用户确保谁实际创建了他们正在运行的代码，特别是对于在Internet上下载或运行的代码，并验证代码在发布后未被更改或篡改。例如，经过数字签名，恶意篡改然后在线重新分发的程序将在运行之前向用户显示警告。</p><p>**问题现象</p><p>ASP.NET页面第一次访问的时候很慢，时间可以持续几十秒到几分钟</p><p><strong>问题原因</strong></p><p>当程序里面需要调用到一些Authenticode Signed的.NET Assembly的时候，它需要连接到外网来验证数字证书。当服务器是无法连接到外网时，这个校验证书的过程需要等到timeout之后才会结束。</p><p><strong>解决办法</strong></p><p>这个解决方案是由微软APAC技术支持中心 Internet Developer Support Team提供 <a href="https://blogs.msdn.microsoft.com/asiatech_zh-cn/2011/04/24/asp-net/）" target="_blank" rel="noopener">https://blogs.msdn.microsoft.com/asiatech_zh-cn/2011/04/24/asp-net/）</a></p><p>请同时在以下两个aspnet.config文件中加入以下内容。</p><pre><code>C:\Windows\Microsoft.NET\Framework\v2.0.50727\aspnet.configC:\Windows\Microsoft.NET\Framework64\v2.0.50727\aspnet.config</code></pre><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;configuration&gt;    &lt;runtime&gt;            &lt;generatePublisherEvidence enabled=&quot;false&quot;/&gt;    &lt;/runtime&gt;&lt;/configuration&gt;</code></pre><p>修改以下注册表键值并重起IIS服务，打开注册表regedit，找到以下地址，修改State为00023e00，原先的是00023c00</p><pre><code>[HKEY_USERS\S-1-5-20\Software\Microsoft\Windows\CurrentVersion\WinTrust\Trust Providers\Software Publishing]&quot;State&quot;=dword:00023e00</code></pre><p>然后记得重启一下应用程序池</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPF 全局异常补获</title>
      <link href="/2019/07/30/wpf-exception-catch/"/>
      <url>/2019/07/30/wpf-exception-catch/</url>
      
        <content type="html"><![CDATA[<h3 id="直接上代上码"><a href="#直接上代上码" class="headerlink" title="直接上代上码"></a>直接上代上码</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><pre class=" language-c#"><code class="language-c#">/// <summary>    /// App.xaml 的交互逻辑    /// </summary>    public partial class App : Application    {        public App()        {            //首先注册开始和退出事件            this.Startup += new StartupEventHandler(App_Startup);            this.Exit += new ExitEventHandler(App_Exit);        }        void App_Startup(object sender, StartupEventArgs e)        {            //UI线程未捕获异常处理事件            this.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(App_DispatcherUnhandledException);            //Task线程内未捕获异常处理事件            TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;            //非UI线程未捕获异常处理事件            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);        }        void App_Exit(object sender, ExitEventArgs e)        {            //程序退出时需要处理的业务        }        //UI线程未捕获异常处理事件        void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)        {            string msg = string.Empty;            try            {                e.Handled = true; //把 Handled 属性设为true，表示此异常已处理，程序可以继续运行，不会强制退出                      msg = "捕获未处理异常:" + e.Exception.Message;            }            catch (Exception ex)            {                //此时程序出现严重异常，将强制结束退出                msg = "程序发生致命错误，将终止，请联系运营商！";            }            WritLog(msg);            MessageBox.Show(msg);        }        //非UI线程未捕获异常处理事件        void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)        {            StringBuilder sbEx = new StringBuilder();            if (e.IsTerminating)            {                sbEx.Append("程序发生致命错误，将终止，请联系运营商！\n");            }            sbEx.Append("捕获未处理异常：");            if (e.ExceptionObject is Exception)            {                sbEx.Append(((Exception)e.ExceptionObject).Message);            }            else            {                sbEx.Append(e.ExceptionObject);            }            string msg = sbEx.ToString();            WritLog(msg);            MessageBox.Show(msg);        }        //Task线程内未捕获异常处理事件        void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs args)        {            //task线程内未处理捕获            string msg = "捕获线程内未处理异常：" + args.Exception.Message;            WritLog(msg);            MessageBox.Show(msg);            args.SetObserved();//设置该异常已察觉（这样处理后就不会引起程序崩溃）        }        void WritLog(string msg)        {        }    }</code></pre><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><pre class=" language-c#"><code class="language-c#"> try            {                AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(MyUnhandledException);                Application.Current.DispatcherUnhandledException += new DispatcherUnhandledExceptionEventHandler(MyDispatcherUnhandledException);            }            catch (Exception ex)            {                //string strDateInfo = Application.Current.Resources.MergedDictionaries.First()["An unhandled exception occurred："].ToString() + DateTime.Now + "\r\n";                //string str = string.Format(strDateInfo + Application.Current.Resources.MergedDictionaries.First()["Exception type ：{0}\r\nException information：{1}\r\nException information：{2}\r\n"].ToString(),                //                           ex.GetType().Name, ex.Message, ex.StackTrace);                ////Global.WriteLog("MainWindow:\n" + str);                //MessageBox.Show(Application.Current.Resources.MergedDictionaries.First()["An error occurred. Please check the program log!"].ToString(), Application.Current.Resources.MergedDictionaries.First()["System error"].ToString(), MessageBoxButton.OK, MessageBoxImage.Error);                MessageBox.Show(ex.Message);                //Environment.Exit(0);            }        /// <summary>        /// 用于捕获应用程序域中发生的异常        /// </summary>        /// <param name="sender"></param>        /// <param name="e"></param>        private void MyUnhandledException(object sender, UnhandledExceptionEventArgs e)        {            Exception error = e.ExceptionObject as Exception;            string strDateInfo = "出现应用程序未处理的异常：" + DateTime.Now + "\r\n";            string str = error != null ? string.Format(strDateInfo + "Application UnhandledException:{0};\n\r堆栈信息:{1}", error.Message, error.StackTrace) : string.Format("Application UnhandledError:{0}", e);            MessageBox.Show(str);            //Environment.Exit(0);        }        /// <summary>        /// 用于处理UI线程上未捕获的异常        /// </summary>        /// <param name="sender"></param>        /// <param name="e"></param>        private void MyDispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)        {            string str = "";            string strDateInfo = "An unhandled exception occurred：" + DateTime.Now + "\r\n";            Exception error = e.Exception;            if (error != null)            {                str = string.Format(@"Exception type ：{0}\r\nException information：{1}\r\nException information：{2}\r\n",                     error.GetType().Name, error.Message, error.StackTrace);            }            else            {                str = string.Format("Application thread error :{0}", e);            }            MessageBox.Show(str);            //Environment.Exit(0);        }</code></pre>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WPF </tag>
            
            <tag> WPF异常补获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费的包管理平台使用</title>
      <link href="/2019/07/29/private-nuget/"/>
      <url>/2019/07/29/private-nuget/</url>
      
        <content type="html"><![CDATA[<p>个人私有包地址：<code>https://pkgs.dev.azure.com/zhurg/_packaging/YIN/nuget/v3/index.json</code></p><h3 id="Nuget-私有包"><a href="#Nuget-私有包" class="headerlink" title="Nuget 私有包"></a>Nuget 私有包</h3><h3 id="帐号注册"><a href="#帐号注册" class="headerlink" title="帐号注册"></a>帐号注册</h3><ol><li>注册微软帐号，当然，如果你有outlook.com/live.com/等等可以直接使用</li><li>打开dev.azure.com 注册 azure Organization（输入名称以及所属区域）</li><li>选中刚注册的组织注册Project</li><li>在Project中可以看到几个很常用的功能 <code>Pipelines</code>,<code>Artifacts</code></li><li>没错，我们这里使用的就是 Artifacts</li><li>然后你就知道咋上传包了。</li><li>Connect to feed 里面可以选择上传包的类型<code>Nuget</code>,<code>NPM</code>,<code>Maven</code>,<code>Python</code> …</li><li>选择对应的包，记住自己的包地址。</li><li>下载包的上传工具</li><li>上传,ok 搞定。</li></ol><h3 id="自动交付"><a href="#自动交付" class="headerlink" title="自动交付"></a>自动交付</h3><p>当然是使用Pipelines啦，具体使用教程，可以参见edi大神的博客或微信(edi.wang)</p>]]></content>
      
      
      <categories>
          
          <category> nuget </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuget </tag>
            
            <tag> github </tag>
            
            <tag> 私有包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS_2019_KEY</title>
      <link href="/2019/07/28/vs-2019-key/"/>
      <url>/2019/07/28/vs-2019-key/</url>
      
        <content type="html"><![CDATA[<h3 id="Visual-Stduio-2019-Key"><a href="#Visual-Stduio-2019-Key" class="headerlink" title="Visual Stduio 2019 Key"></a>Visual Stduio 2019 Key</h3><h4 id="Visual-Studio-2019-Enterprise"><a href="#Visual-Studio-2019-Enterprise" class="headerlink" title="Visual Studio 2019 Enterprise"></a>Visual Studio 2019 Enterprise</h4><p><code>BF8Y8-GN2QH-T84XB-QVY3B-RC4DF</code></p><h4 id="Visual-Studio-2019-Professional"><a href="#Visual-Studio-2019-Professional" class="headerlink" title="Visual Studio 2019 Professional"></a>Visual Studio 2019 Professional</h4><p><code>NYWVH-HT4XC-R2WYW-9Y3CM-X4V3Y</code></p>]]></content>
      
      
      <categories>
          
          <category> VS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS </tag>
            
            <tag> Visual studio </tag>
            
            <tag> Key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitbub和hexo制作免费博客</title>
      <link href="/2019/07/27/blog-init/"/>
      <url>/2019/07/27/blog-init/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="解决npm慢的问题"><a href="#解决npm慢的问题" class="headerlink" title="解决npm慢的问题"></a>解决npm慢的问题</h3><p><code>npm config set registry https:``//registry.npm.taobao.org</code></p><p><code>npm install</code></p><h3 id="核心安装步骤"><a href="#核心安装步骤" class="headerlink" title="核心安装步骤"></a>核心安装步骤</h3><ol><li>安装git工具，并配置用户及邮箱地址</li><li>生成 SSH Key</li><li>将生成日pub内容复制至github ssh中</li><li>安装nodejs</li><li>全局安装hexo [npm install -g hexo]</li><li>初始化hexo [hexo init]</li><li>安装github插件[npm install hexo-deployer-git –save]</li></ol><h3 id="hexo-常和命令"><a href="#hexo-常和命令" class="headerlink" title="hexo 常和命令"></a>hexo 常和命令</h3><p>hexo new “postName” #新建文章<br>hexo new page “pageName” #新建页面<br>hexo generate #生成静态页面至public目录<br>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy #部署到GitHub<br>hexo help  # 查看帮助<br>hexo version  #查看Hexo的版本</p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy</p><h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><p>hexo s -g #生成并本地预览<br>hexo d -g #生成并上传</p><h2 id="使用本主题"><a href="#使用本主题" class="headerlink" title="使用本主题"></a>使用本主题</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p><code>git clone https://github.com/blinkfox/hexo-theme-matery.git theme/matery</code></p><h3 id="新建分类"><a href="#新建分类" class="headerlink" title="新建分类"></a>新建分类</h3><p><code>hexo new page &quot;categories&quot;</code></p><p><code>hexo new page &quot;tags&quot;</code></p><p><code>hexo new page &quot;about&quot;</code></p><p><code>hexo new page &quot;friends&quot;</code></p><h3 id="在对应分类index-md文件中输入如下内容"><a href="#在对应分类index-md文件中输入如下内容" class="headerlink" title="在对应分类index.md文件中输入如下内容"></a>在对应分类index.md文件中输入如下内容</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories/tags/about/friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories/tags/about/friends"</span><span class="token punctuation">---</span></code></pre><h3 id="在你的博客-source-目录下新建-data-目录，在-data-目录中新建-friends-json-文件，文件内容如下所示："><a href="#在你的博客-source-目录下新建-data-目录，在-data-目录中新建-friends-json-文件，文件内容如下所示：" class="headerlink" title="在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示："></a>在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"ttps://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="几个常用插件"><a href="#几个常用插件" class="headerlink" title="几个常用插件"></a>几个常用插件</h3><table><thead><tr><th>功能</th><th>插件</th></tr></thead><tbody><tr><td>代码高亮</td><td>npm i -S hexo-prism-plugin</td></tr><tr><td>内容搜索</td><td>npm install hexo-generator-search –save</td></tr><tr><td>中文链接转拼音</td><td>npm i hexo-permalink-pinyin –save</td></tr><tr><td>文章字数、阅读时长信息</td><td>npm i –save hexo-wordcount</td></tr><tr><td>RSS</td><td>npm install hexo-generator-feed –save</td></tr></tbody></table><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下</p><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code>中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code>中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code>的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span></code></pre><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>]]></content>
      
      
      <categories>
          
          <category> gitbub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
